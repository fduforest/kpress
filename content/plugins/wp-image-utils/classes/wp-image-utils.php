<?php

if ( ! class_exists( 'WordPress_Image_Utils' ) ) {

	/**
	 * Main / front controller class
	 */
	class WordPress_Image_Utils extends WPIU_Module {
		/**
		 * @var array
		 */
		protected static $readable_properties = array(); // These should really be constants, but PHP doesn't allow class constants to be arrays
		/**
		 * @var array
		 */
		protected static $writeable_properties = array();
		/**
		 * @var array
		 */
		protected $modules;
		/**
		 * @var array
		 */
		protected $modified_types = array();

		/**
		 *
		 */
		const VERSION = '0.3.4';
		/**
		 *
		 */
		const PREFIX = 'wpiu_';
		/**
		 *
		 */
		const DEBUG_MODE = false;
		/**
		 *
		 */
		const REQUIRED_CAPABILITY = 'manage_options';

		/*
		 * Magic methods
		 */

		/**
		 * Constructor
		 *
		 * @mvc Controller
		 */
		protected function __construct() {
			add_image_size( 'featured_preview', 100, 100, true );

			$this->register_hook_callbacks();

			$this->modules = array(
				'WPIU_Settings' => WPIU_Settings::get_instance()
			);
		}


		/*
		 * Static methods
		 */

		/**
		 * Enqueues CSS, JavaScript, etc
		 *
		 * @mvc Controller
		 */
		public static function load_resources() {
			wp_register_script(
				self::PREFIX . 'wp-image-utils-admin',
				plugins_url( 'javascript/wp-imageutils-admin.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);


			wp_register_style(
				self::PREFIX . 'admin',
				plugins_url( 'css/admin.css', dirname( __FILE__ ) ),
				array(),
				self::VERSION,
				'all'
			);

			wp_register_style(
				self::PREFIX . 'wpiu',
				plugins_url( 'css/wpiu.css', dirname( __FILE__ ) ),
				array(),
				self::VERSION,
				'all'
			);

			if ( is_admin() ) {
				wp_enqueue_style( self::PREFIX . 'admin' );
				wp_enqueue_script( self::PREFIX . 'wp-image-utils-admin' );
			} else {
				wp_enqueue_style( self::PREFIX . 'wpiu' );
			}
		}

		/**
		 * Clears caches of content generated by caching plugins like WP Super Cache
		 *
		 * @mvc Model
		 */
		protected static function clear_caching_plugins() {
			// WP Super Cache
			if ( function_exists( 'wp_cache_clear_cache' ) ) {
				wp_cache_clear_cache();
			}

			// W3 Total Cache
			if ( class_exists( 'W3_Plugin_TotalCacheAdmin' ) ) {
				$w3_total_cache = w3_instance( 'W3_Plugin_TotalCacheAdmin' );

				if ( method_exists( $w3_total_cache, 'flush_all' ) ) {
					$w3_total_cache->flush_all();
				}
			}
		}


		/*
		 * Instance methods
		 */

		/**
		 * Prepares sites to use the plugin during single or network-wide activation
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		public function activate( $network_wide ) {
			global $wpdb;

			if ( function_exists( 'is_multisite' ) && is_multisite() ) {
				if ( $network_wide ) {
					$blogs = $wpdb->get_col( "SELECT blog_id FROM $wpdb->blogs" );

					foreach ( $blogs as $blog ) {
						switch_to_blog( $blog );
						$this->single_activate( $network_wide );
					}

					restore_current_blog();
				} else {
					$this->single_activate( $network_wide );
				}
			} else {
				$this->single_activate( $network_wide );
			}
		}

		/**
		 * Runs activation code on a new WPMS site when it's created
		 *
		 * @mvc Controller
		 *
		 * @param int $blog_id
		 */
		public function activate_new_site( $blog_id ) {
			switch_to_blog( $blog_id );
			$this->single_activate( true );
			restore_current_blog();
		}

		/**
		 * Prepares a single blog to use the plugin
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		protected function single_activate( $network_wide ) {
			foreach ( $this->modules as $module ) {
				$module->activate( $network_wide );
			}
		}

		/**
		 * Rolls back activation procedures when de-activating the plugin
		 *
		 * @mvc Controller
		 */
		public function deactivate() {
			foreach ( $this->modules as $module ) {
				$module->deactivate();
			}
		}

		/**
		 * Register callbacks for actions and filters
		 *
		 * @mvc Controller
		 */
		public function register_hook_callbacks() {
			add_action( 'wpmu_new_blog', __CLASS__ . '::activate_new_site' );
			add_action( 'wp_enqueue_scripts', __CLASS__ . '::load_resources' );
			add_action( 'admin_enqueue_scripts', __CLASS__ . '::load_resources' );
			add_action( 'admin_menu', array( $this, 'register_tools_pages' ) );

			add_action( 'init', 'session_start' );

			add_action( 'init', array( $this, 'init' ) );
			add_action( 'init', array( $this, 'upgrade' ), 11 );

			add_filter( 'sanitize_file_name', array( $this, 'sanitize_file_name' ), 10 );
			add_action( 'add_attachment', array( $this, 'add_attachment' ) );
			add_action( 'save_post', array( $this, 'save_post' ) );

			add_filter( 'media_row_actions', array( $this, 'add_media_row_action' ), 10, 2 );
			add_action( 'admin_footer', array( $this, 'bulk_admin_footer' ) );
			add_action( 'load-upload.php', array( $this, 'bulk_action' ) );

			$supported_post_types = apply_filters( 'wpiu_supported_post_types', array( 'post', 'page' ) );

			if ( ! empty( $supported_post_types ) ) {
				foreach ( $supported_post_types as $post_type ) {
					add_filter( "manage_{$post_type}_posts_columns", array( $this, 'columns_head' ) );
					add_action( "manage_{$post_type}_posts_custom_column", array( $this, 'columns_content' ), 10, 2 );
					add_filter( "manage_edit-{$post_type}_sortable_columns", array( $this, 'columns_sortable' ) );
				}
			}
			add_filter( "posts_clauses", array( $this, 'order_by_thumbnail_id' ), 10, 2 );

			add_action( 'wp_ajax_bulk_feature', array( $this, 'bulk_feature_callback' ) );
		}

		function order_by_thumbnail_id( $clauses, $wp_query ) {
			global $wpdb;
			if ( isset( $wp_query->query['orderby'] ) && $wp_query->query['orderby'] == 'featured_image' ) {
				$clauses['join'] .= <<<SQL
LEFT OUTER JOIN {$wpdb->postmeta} AS thumbnail_meta ON {$wpdb->posts}.ID=thumbnail_meta.post_id AND thumbnail_meta.meta_key='_thumbnail_id'
SQL;
				$clauses['orderby'] = "thumbnail_meta.meta_value ";
				if ( strtoupper( $wp_query->get( 'order' ) ) == 'ASC' ) {
					$clauses['orderby'] .= 'ASC ';
				} else {
					$clauses['orderby'] .= 'DESC ';
				}
			}

			return $clauses;
		}

		public function columns_sortable( $columns = array() ) {
			$columns['featured_image'] = 'featured_image';

			return $columns;
		}

		/**
		 * @param $defaults
		 *
		 * @return mixed
		 */
		public function columns_head( $defaults ) {
			$defaults['featured_image'] = __( 'Featured Image', 'wpiu_domain' );

			return $defaults;
		}

		/**
		 * @param $column_name
		 * @param $post_ID
		 */
		public function columns_content( $column_name, $post_ID ) {
			if ( $column_name == 'featured_image' ) {
				the_post_thumbnail( 'featured_preview', array( 'data-imgid' => get_post_thumbnail_id( $post_ID ) ) );
			}
		}

		/**
		 * @param $post_id
		 */
		function add_attachment( $post_id ) {
			$old_file_path = get_attached_file( $post_id );
			list( $directory, $old_basename, $extension, $old_filename ) = array_values( pathinfo( $old_file_path ) );
			$this->set_original_filename( $post_id, $old_basename );
		}

		/**
		 *
		 */
		function bulk_admin_footer() {
			global $pagenow;

			if ( $pagenow == 'upload.php' ) {
				?>
				<script type="text/javascript">
					jQuery(document).ready(function () {
						jQuery('<option>').val('fixname').text('<?php _e('Fix name', 'wpiu_domain')?>').appendTo("select[name='action']");
						jQuery('<option>').val('fixname').text('<?php _e('Fix name', 'wpiu_domain')?>').appendTo("select[name='action2']");
						jQuery('<option>').val('regenthumbs').text('<?php _e('Regenerate thumbnails', 'wpiu_domain')?>').appendTo("select[name='action']");
						jQuery('<option>').val('regenthumbs').text('<?php _e('Regenerate thumbnails', 'wpiu_domain')?>').appendTo("select[name='action2']");
					});
				</script>
			<?php
			}
		}

		/**
		 *
		 */
		function bulk_action() {
			if ( isset( $_REQUEST['detached'] ) ) {
				return;
			}
			$action_request_top    = ( isset( $_REQUEST['action'] ) && ! empty( $_REQUEST['action'] ) ) ? $_REQUEST['action'] : '';
			$action_request_bottom = ( isset( $_REQUEST['action2'] ) && ! empty( $_REQUEST['action2'] ) ) ? $_REQUEST['action2'] : '';
			$action                = ( ! empty( $action_request_top ) ) ? $action_request_top : $action_request_bottom;
			$allowed_actions       = array( 'fixname', 'regenthumbs' );
			if ( empty( $action ) || ! in_array( $action, $allowed_actions ) ) {
				return;
			}
			check_admin_referer( 'bulk-media' );
			$query_args = array();
			if ( isset( $_REQUEST['post_mime_type'] ) ) {
				$query_args['post_mime_type'] = $_REQUEST['post_mime_type'];
			}

			if ( isset( $_REQUEST['paged'] ) ) {
				$query_args['paged'] = $_REQUEST['paged'];
			}

			switch ( $action ) {
				case 'regenthumbs':
					$media = ( isset( $_REQUEST['media'] ) ) ? (array) $_REQUEST['media'] : array();

					if ( ! empty( $media ) ) {
						$post_ids = array_map( 'intval', $_REQUEST['media'] );
						if ( empty( $post_ids ) ) {
							return;
						}
					}

					$count = 0;
					if ( isset( $post_ids ) ) {
						foreach ( $post_ids as $post_id ) {
							$this->regenerate_thumbnails( get_post( $post_id, ARRAY_A ) );
						}
					}
					$query_args['updated'] = $count;
					$query_args['ids']     = join( ',', $post_ids );
					break;

				case 'fixname':
					$media = ( isset( $_REQUEST['media'] ) ) ? (array) $_REQUEST['media'] : array();

					if ( ! empty( $media ) ) {
						$post_ids = array_map( 'intval', $_REQUEST['media'] );
						if ( empty( $post_ids ) ) {
							return;
						}
					}

					$count = 0;
					if ( isset( $post_ids ) ) {
						foreach ( $post_ids as $post_id ) {
							$this->rename_existing_image( get_post( $post_id, ARRAY_A ) );
						}
					}
					$query_args['updated'] = $count;
					$query_args['ids']     = join( ',', $post_ids );
					break;

				default:
					return;
					break;
			}
			$sendback = add_query_arg( $query_args, admin_url( 'upload.php' ) );
			wp_redirect( $sendback );
			exit();
		}

		/**
		 * @param $actions
		 * @param $post
		 *
		 * @return mixed
		 */
		function add_media_row_action( $actions, $post ) {
			global $current_screen;
			if ( 'upload' != $current_screen->id || ! in_array( $post->post_mime_type, array(
						"image/jpg",
						"image/jpeg",
						"image/png",
						"image/gif"
					) )
			) {
				return $actions;
			}

			$url                = wp_nonce_url( admin_url( 'upload.php?page=wpiu_fix_name&noheader&id=' . $post->ID ), 'fixname' );
			$actions['fixname'] = '<a href="' . esc_url( $url ) . '" title="' . esc_attr( __( 'Fix name', 'wpiu_domain' ) ) . '">' . __( 'Fix name', 'wpiu_domain' ) . '</a>';

			$url                   = wp_nonce_url( admin_url( 'upload.php?page=wpiu_regen_thumb&noheader&id=' . $post->ID ), 'regenthumb' );
			$actions['regenthumb'] = '<a href="' . esc_url( $url ) . '" title="' . esc_attr( __( 'Regenerate thumbnails', 'wpiu_domain' ) ) . '">' . __( 'Regenerate thumbnails', 'wpiu_domain' ) . '</a>';

			return $actions;
		}

		/**
		 * Adds pages to the Admin Panel menu
		 *
		 * @mvc Controller
		 */
		public
		function register_tools_pages() {
			add_submenu_page(
				'tools.php',
				__( 'Bulk Feature Images', 'wpiu_domain' ),
				__( 'Bulk Feature Images', 'wpiu_domain' ),
				self::REQUIRED_CAPABILITY,
				'wpiu_feature_image',
				array( $this, 'markup_tools_fi_page' )
			);

			add_submenu_page(
				'tools.php',
				__( 'Cleanup Images', 'wpiu_domain' ),
				__( 'Cleanup Images', 'wpiu_domain' ),
				self::REQUIRED_CAPABILITY,
				'wpiu_cleanup_image',
				array( $this, 'markup_tools_ci_page' )
			);

			add_submenu_page(
				null,
				__( 'Fix name', 'wpiu_domain' ),
				'',
				'upload_files',
				'wpiu_fix_name',
				array( $this, 'fix_name_action' )
			);

			add_submenu_page(
				null,
				__( 'Regenerate thumbnails', 'wpiu_domain' ),
				'',
				'upload_files',
				'wpiu_regen_thumb',
				array( $this, 'regen_thumb_action' )
			);
		}

		/**
		 *
		 */
		public
		function fix_name_action() {
			if ( array_key_exists( "id", $_GET ) && (int) $_GET["id"] > 0 ) {
				$this->rename_existing_image( get_post( (int) $_GET["id"], ARRAY_A ) );
				$query_args['updated'] = 1;
				$query_args['ids']     = $_GET["id"];
				$sendback              = add_query_arg( $query_args, admin_url( 'upload.php' ) );
				wp_redirect( $sendback );
				exit();
			}
		}

		/**
		 *
		 */
		public
		function regen_thumb_action() {
			if ( array_key_exists( "id", $_GET ) && (int) $_GET["id"] > 0 ) {
				$this->regenerate_thumbnails( get_post( (int) $_GET["id"], ARRAY_A ) );
				$query_args['updated'] = 1;
				$query_args['ids']     = $_GET["id"];
				$sendback              = add_query_arg( $query_args, admin_url( 'upload.php' ) );
				wp_redirect( $sendback );
				exit();
			}
		}

		/**
		 * Creates the markup for the Tools page
		 *
		 * @mvc Controller
		 */
		public
		function markup_tools_fi_page() {
			if ( current_user_can( self::REQUIRED_CAPABILITY )
			) {
				echo self::render_template( 'wpiu-tools/page-fi-tools.php' );
			} else {
				wp_die( 'Access denied.' );
			}
		}

		/**
		 * Creates the markup for the Tools page
		 *
		 * @mvc Controller
		 */
		public
		function markup_tools_ci_page() {
			if ( current_user_can( self::REQUIRED_CAPABILITY )
			) {
				echo self::render_template( 'wpiu-tools/page-ci-tools.php', array( 'post' => $_POST ) );
			} else {
				wp_die( 'Access denied.' );
			}
		}

		/**
		 *
		 */
		function bulk_feature_callback() {
			$selected_category  = $_POST['categories'];
			$selected_tag       = $_POST['tags'];
			$selected_post_type = $_POST['types'];
			$selected_user      = $_POST['authors'];

			$args['posts_per_page'] = - 1; // find all matching posts, not only 10
			//$args['ignore_sticky_posts'] = true;

			if ( count( $selected_post_type ) > 0 ) {
				$args['post_type'] = implode( "', '", $selected_post_type );
			}
			if ( count( $selected_user ) > 0 ) {
				$args['author'] = implode( "', '", $selected_user );
			}
			if ( count( $selected_category ) > 0 ) {
				$args['cat'] = implode( "', '", $selected_category );
			}
			if ( count( $selected_tag ) > 0 ) {
				$args['tag_id'] = implode( "', '", $selected_tag );
			}

			$count     = 0;
			$the_query = new WP_Query( $args );
			if ( $the_query->have_posts() ) {
				$the_query->the_post();
				$count += $this->set_first_image_featured( get_the_ID() );
			}

			echo sprintf( _n( 'Updated 1 post', 'Updated %s posts', $count, 'wpiu_domain' ), $count );

			die(); // this is required to return a proper result
		}

		/**
		 * @param $post_id
		 */
		public
		function save_post(
			$post_id
		) {
			$featured = $this->modules['WPIU_Settings']->settings['featured'];
			if ( isset( $featured['first-image'] ) && $featured['first-image'] == 1 && ! $this->is_suppress_specific( $featured ) ) {
				$this->set_first_image_featured( $post_id );
			}
		}

		/**
		 * @param $array_in
		 *
		 * @return array
		 */
		private
		function to_int_array(
			$array_in
		) {
			$array_out = array();

			if ( isset( $array_in ) && is_array( $array_in ) ) {
				foreach ( $array_in as $id ) {
					array_push( $array_out, intval( $id ) );
				}
			}

			return $array_out;
		}

		/**
		 * @param $options
		 *
		 * @return array
		 */
		public
		function get_auto_category(
			$options
		) {
			return $this->to_int_array( $options['auto-category'] );
		}

		/**
		 * @param $options
		 *
		 * @return array
		 */
		public
		function get_auto_tag(
			$options
		) {
			return $this->to_int_array( $options['auto-tag'] );
		}

		/**
		 * @param $options
		 *
		 * @return array
		 */
		public
		function get_auto_user(
			$options
		) {
			return $this->to_int_array( $options['auto-user'] );
		}

		/**
		 * @param $options
		 *
		 * @return mixed
		 */
		public
		function get_auto_post_type(
			$options
		) {
			return $options['auto-post-type'];
		}

		/**
		 * @param $options
		 *
		 * @return bool
		 */
		public
		function is_suppress_specific(
			$options
		) {
			$auto_category  = $this->get_auto_category( $options );
			$auto_tag       = $this->get_auto_tag( $options );
			$auto_user      = $this->get_auto_user( $options );
			$auto_post_type = $this->get_auto_post_type( $options );

			return (
				( count( $auto_user ) > 0 && ! in_array( get_the_author_meta( 'ID' ), $auto_user ) )
				|| ( count( $auto_tag ) > 0 && ! has_tag( $auto_tag ) )
				|| ( count( $auto_category ) > 0 && ! has_category( $auto_category ) )
				|| ( count( $auto_post_type ) > 0 && ! in_array( get_post_type( get_the_ID() ), $auto_post_type ) )
			);
		}

		/**
		 * @param $post_id
		 *
		 * @return int
		 */
		public
		function set_first_image_featured(
			$post_id
		) {
			if ( ! get_post_thumbnail_id( $post_id ) ) {
				$content_post = get_post( $post_id );
				$content      = $content_post->post_content;
				$img_id       = $this->get_first_image_id( $content );
				if ( $img_id ) {
					set_post_thumbnail( $post_id, $img_id );

					return 1;
				}
			}

			return 0;
		}

		/**
		 * @param $content
		 *
		 * @return int
		 */
		private
		function get_first_image_id(
			$content
		) {
			global $wpdb;
			preg_match_all( '/<img.*?src=[\'"]([^\'"]+)[\'"][^>]*>/i', $content, $urls );
			if ( isset( $urls ) and 0 < count( $urls ) ) {
				$upload_dir_paths = wp_upload_dir();
				foreach ( $urls[1] as $url ) {
					preg_match( '|' . get_site_url() . '|i', $url, $urls );
					if ( isset( $urls ) and 0 < count( $urls ) ) {
						$img_id = false;
						if ( false !== strpos( $url, $upload_dir_paths['baseurl'] ) ) {
							$url    = preg_replace( '/-\d+x\d+(?=\.(jpg|jpeg|png|gif)$)/i', '', $url );
							$url    = str_replace( $upload_dir_paths['baseurl'] . '/', '', $url );
							$img_id = $wpdb->get_var( $wpdb->prepare( "SELECT wposts.ID FROM $wpdb->posts wposts, $wpdb->postmeta wpostmeta WHERE wposts.ID = wpostmeta.post_id AND wpostmeta.meta_key = '_wp_attached_file' AND wpostmeta.meta_value = '%s' AND wposts.post_type = 'attachment'", $url ) );
						}
						if ( $img_id ) {
							return intval( $img_id );
						}
					}
				}
			}

			return 0;
		}

		/**
		 * @param $post
		 *
		 * @return mixed
		 */
		function regenerate_thumbnails( $post ) {
			$image = get_post( $post['ID'] );

			if ( ! $image || 'attachment' != $image->post_type || 'image/' != substr( $image->post_mime_type, 0, 6 ) ) {
				trigger_error( $post['ID'] . ' is an invalid image ID.' );

				return $post;
			}

			$full_size_path = get_attached_file( $image->ID );

			if ( false === $full_size_path || ! file_exists( $full_size_path ) ) {
				trigger_error( 'The originally uploaded image file cannot be found at ' . $full_size_path );

				return $post;
			}

			$metadata = wp_generate_attachment_metadata( $image->ID, $full_size_path );

			if ( is_wp_error( $metadata ) ) {
				trigger_error( trigger_error );

				return $post;
			}

			if ( empty( $metadata ) ) {
				trigger_error( 'Unknown failure reason.' );

				return $post;
			}

			wp_update_attachment_metadata( $image->ID, $metadata );
		}

		/**
		 * @param $post
		 *
		 * @return mixed
		 */
		function rename_existing_image( $post ) {
			$post_id = $post['ID'];

			if ( ( $post['post_title'] == "" ) || ( $this->is_header_image( $post_id ) ) ) {
				return $post;
			}

			//Get current path info
			$old_file_path = get_attached_file( $post_id );
			list( $directory, $old_basename, $extension, $old_filename ) = array_values( pathinfo( $old_file_path ) );

			$this->set_original_filename( $post_id, $old_basename );
			$original_filename = get_post_meta( $post_id, '_original_filename', true );

			//Get new path info
			$dateTime      = get_the_time( 'Y-m-d_H-i-s', $post_id );
			$new_basename  = $this->sanitize_file_name( $original_filename, $dateTime );
			$new_file_path = trailingslashit( $directory ) . $new_basename;
			$new_filename  = str_replace( '.' . $extension, '', $new_basename );

			//Nothing to do
			if ( $old_basename == $new_basename ) {
				return $post;
			}

			//New path already exists -> abort.
			if ( file_exists( $new_file_path ) === true ) {
				trigger_error( "WP File Utils wants to rename a file to " . $new_file_path . " but it already exists.", E_USER_NOTICE );

				return $post;
			}

			//Store both paths in $post
			$post['old_filename'] = $old_filename;
			$post['new_filename'] = $new_filename;


			try {
				$this->rename_file_on_disk( $old_file_path, $new_file_path );
			} catch ( Exception $e ) {
				trigger_error( "Exception occurred while renaming: " . $e->getMessage(), E_USER_NOTICE );

				return $post;
			}

			$meta = $this->update_meta_on_rename( wp_get_attachment_metadata( $post_id ), $old_filename, $new_filename, $extension );

			if ( wp_attachment_is_image( $post_id ) ) {
				list( $orig_image_urls, $meta ) = $this->rename_image_sizes( $post_id, $meta, $directory, $old_filename, $new_filename );
			} else {
				$orig_attachment_url = wp_get_attachment_url( $post_id );
			}

			if ( $meta ) {
				wp_update_attachment_metadata( $post_id, $meta );
			}
			update_attached_file( $post_id, $new_file_path );

			wp_update_post( $post );

			$this->update_references_in_posts( $post_id, $orig_image_urls, $meta, $orig_attachment_url );

			if ( isset( $_REQUEST['_wp_original_http_referer'] ) && strpos( $_REQUEST['_wp_original_http_referer'], '/wp-admin/' ) === false ) {
				$_REQUEST['_wp_original_http_referer'] = get_permalink( $post_id );
			}

			return $post;
		}

		/**
		 * @param $id
		 *
		 * @return bool
		 */
		function is_header_image( $id ) {
			global $wpdb;
			static $headers = false;
			if ( $headers == false ) {
				$headers = $wpdb->get_col( "SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_is_custom_header'" );
			}

			return in_array( $id, $headers );
		}

		/**
		 * @param $filename
		 *
		 * @return string
		 */
		public
		function sanitize_file_name(
			$filename, $dateTime = null
		) {
			$rename     = $this->modules['WPIU_Settings']->settings['rename'];
			$extensions = array( '.jpg', '.jpeg', '.png', '.gif' );

			$file_info      = pathinfo( $filename );
			$file_extension = empty( $file_info['extension'] ) ? '' : '.' . $file_info['extension'];

			if ( isset( $rename['extensions'] ) && ! empty( $rename['extensions'] ) ) {
				$extensions = array_intersect( explode( ",", strtolower( $rename['extensions'] ) ), $extensions );
			}

			if ( ( count( $extensions ) > 0 ) && ! in_array( strtolower( $file_extension ), $extensions ) ) {
				return $filename;
			}

			$sanitized_file_name = basename( $filename, $file_extension );

			if ( isset( $rename['md5'] ) && $rename['md5'] == 1 ) {
				$sanitized_file_name = md5( $sanitized_file_name );
			}

			if ( isset( $rename['current-date'] ) && $rename['current-date'] == 1 ) {
				if ( $dateTime == null ) {
					$dateTime = date( 'Y-m-d_H-i-s' );
				}
				$sanitized_file_name = $dateTime . '_' . $sanitized_file_name;
			}

			if ( isset( $rename['post-slug'] ) && $rename['post-slug'] == 1 ) {
				$post_slug = $this->get_post_slug();
				if ( $post_slug != '' ) {
					$sanitized_file_name = $post_slug . '_' . $sanitized_file_name;
				}
			}

			if ( isset( $rename['site-url'] ) && $rename['site-url'] == 1 ) {
				$site_url = $this->get_site_url( $rename );
				if ( isset( $rename['remove-tlds'] ) && $rename['remove-tlds'] == 1 ) {
					$site_url = $this->remove_tdls_from_url( $site_url, $rename );
				}
				$sanitized_file_name = $site_url . '_' . $sanitized_file_name;
			}

			if ( isset( $rename['accents'] ) && $rename['accents'] == 1 ) {
				$sanitized_file_name = remove_accents( $sanitized_file_name );
			}

			if ( isset( $rename['special-chars'] ) && $rename['special-chars'] == 1 ) {
				$sanitized_file_name = $this->remove_special_chars( $sanitized_file_name );
			}

			if ( isset( $rename['lowercase'] ) && $rename['lowercase'] == 1 ) {
				$sanitized_file_name = strtolower( $sanitized_file_name );
			}

			if ( isset( $rename['non-ascii'] ) && $rename['non-ascii'] == 1 ) {
				$sanitized_file_name = preg_replace( '/[[:^print:]]/', '', $sanitized_file_name );
			}

			return $sanitized_file_name . $file_extension;
		}

		/**
		 * @return string
		 */
		public
		function get_post_slug() {
			$post_slug = '';
			$post      = null;

			if ( isset( $_REQUEST['post_id'] ) ) {
				$post_id = $_REQUEST['post_id'];
			} else {
				$post_id = false;
			}

			if ( $post_id && is_numeric( $post_id ) ) {
				$post = get_post( $post_id );
			}

			if ( $post != null ) {
				$post_slug = $post->post_name;
			}

			return $post_slug;
		}

		/**
		 * @param $rename
		 *
		 * @return mixed
		 */
		public
		function get_site_url(
			$rename
		) {
			$site_url = site_url();
			$site_url = preg_replace( '/http:\/\/|https:\/\//', '', $site_url );
			$site_url = untrailingslashit( $site_url );
			if ( isset( $rename['remove-port'] ) && $rename['remove-port'] == 1 ) {
				$site_url = preg_replace( '/:(\d)+/', '', $site_url );
			}
			if ( isset( $rename['remove-dir'] ) && $rename['remove-dir'] == 1 ) {
				$site_url = preg_replace( '/\/.*/', '', $site_url );
			}
			$site_url = preg_replace( "/[:\s\\/]/", '_', $site_url );

			return $site_url;
		}

		/**
		 * @param $url
		 * @param $rename
		 *
		 * @return mixed
		 */
		public
		function remove_tdls_from_url(
			$url, $rename
		) {
			$tlds_to_remove               = explode( ',', $rename['tlds-to-remove'] );
			$site_domains_to_remove_regex = implode( $tlds_to_remove, '|' );
			$site_domains_to_remove_regex = preg_replace( '/\./', '\\.', $site_domains_to_remove_regex );
			$url                          = preg_replace( '/' . $site_domains_to_remove_regex . '/', '', $url );

			return $url;
		}

		/**
		 * @param $string
		 *
		 * @return mixed
		 */
		public
		static function remove_special_chars(
			$string
		) {
			$special_chars = array(
				"?",
				"[",
				"]",
				"/",
				"\\",
				"=",
				"<",
				">",
				":",
				";",
				",",
				"'",
				"\"",
				"&",
				"$",
				"#",
				"*",
				"(",
				")",
				"|",
				"~",
				"`",
				"!",
				"{",
				"}",
				chr( 0 )
			);
			$special_chars = apply_filters( 'sanitize_file_name_chars', $special_chars, $string );
			$string        = str_replace( $special_chars, '', $string );
			$string        = preg_replace( '/\+/', '', $string );

			return $string;
		}

		/**
		 * Initializes variables
		 *
		 * @mvc Controller
		 */
		public function init() {
			try {
			} catch ( Exception $exception ) {
				add_notice( __METHOD__ . ' error: ' . $exception->getMessage(), 'error' );
			}
		}

		/**
		 * Checks if the plugin was recently updated and upgrades if necessary
		 *
		 * @mvc Controller
		 *
		 * @param string $db_version
		 */
		public function upgrade( $db_version = 0 ) {
			if ( version_compare( $this->modules['WPIU_Settings']->settings['db-version'], self::VERSION, '==' ) ) {
				return;
			}

			foreach ( $this->modules as $module ) {
				$module->upgrade( $this->modules['WPIU_Settings']->settings['db-version'] );
			}

			$this->modules['WPIU_Settings']->settings = array( 'db-version' => self::VERSION );
			self::clear_caching_plugins();
		}

		/**
		 * @param $post_id
		 * @param $old_basename
		 */
		public function set_original_filename( $post_id, $old_basename ) {
			$original_filename = get_post_meta( $post_id, '_original_filename', true );
			if ( empty( $original_filename ) ) {
				add_post_meta( $post_id, '_original_filename', $old_basename );
			}
		}

		/**
		 * @param $old_file_path
		 * @param $new_file_path
		 *
		 * @throws Exception
		 */
		public function rename_file_on_disk( $old_file_path, $new_file_path ) {
			if ( ! file_exists( $old_file_path ) ) {
				throw new Exception( "WP File Utils could not find the file " . $old_file_path );
			} else if ( ! rename( $old_file_path, $new_file_path ) ) {
				throw new Exception( "WP File Utils could not rename " . $old_file_path . " to " . $new_file_path );
			}
		}

		/**
		 * @param $meta
		 * @param $old_filename_wo_ext
		 * @param $new_filename_wo_ext
		 * @param $ext
		 *
		 * @return mixed
		 */
		public function update_meta_on_rename( $meta, $old_filename_wo_ext, $new_filename_wo_ext, $ext ) {
			if ( $meta ) {
				$meta['file'] = str_replace( $old_filename_wo_ext, $new_filename_wo_ext, $meta['file'] );
				if ( isset( $meta["url"] ) && $meta["url"] != "" && count( $meta["url"] ) > 4 ) {
					$meta["url"] = str_replace( $old_filename_wo_ext, $new_filename_wo_ext, $meta["url"] );
				} else {
					$meta["url"] = $new_filename_wo_ext . "." . $ext;
				}

				return $meta;
			}

			return $meta;
		}

		/**
		 * @param $post_id
		 * @param $meta
		 * @param $directory
		 * @param $old_filename_wo_ext
		 * @param $new_filename_wo_ext
		 *
		 * @return array
		 */
		public function rename_image_sizes( $post_id, $meta, $directory, $old_filename_wo_ext, $new_filename_wo_ext ) {
			$orig_image_urls         = array();
			$orig_image_data         = wp_get_attachment_image_src( $post_id, 'full' );
			$orig_image_urls['full'] = $orig_image_data[0];
			foreach ( $meta['sizes'] as $size => $meta_size ) {
				$meta_old_filename        = $meta['sizes'][ $size ]['file'];
				$meta_old_file_path       = trailingslashit( $directory ) . $meta_old_filename;
				$meta_new_filename        = str_replace( $old_filename_wo_ext, $new_filename_wo_ext, $meta_old_filename );
				$meta_new_file_path       = trailingslashit( $directory ) . $meta_new_filename;
				$orig_image_data          = wp_get_attachment_image_src( $post_id, $size );
				$orig_image_urls[ $size ] = $orig_image_data[0];

				if ( file_exists( $meta_old_file_path ) && ( ( ! file_exists( $meta_new_file_path ) )
				                                             || is_writable( $meta_new_file_path ) )
				) {
					rename( $meta_old_file_path, $meta_new_file_path );
					$meta['sizes'][ $size ]['file'] = $meta_new_filename;
				}
			}

			return array( $orig_image_urls, $meta );
		}

		/**
		 * @param $orig_image_urls
		 * @param $size
		 * @param $post_id
		 */
		public function update_image_url_in_post( $orig_image_urls, $size, $post_id ) {
			global $wpdb;
			$orig_image_url = $orig_image_urls[ $size ];
			$image_src      = wp_get_attachment_image_src( $post_id, $size );
			if ( $image_src ) {
				$new_image_url = $image_src[0];
				$wpdb->query( $wpdb->prepare( "UPDATE $wpdb->posts SET post_content = REPLACE(post_content, '%s', '%s');", $orig_image_url, $new_image_url ) );
			}
		}

		/**
		 * @param $post_id
		 * @param $orig_attachment_url
		 */
		public function update_attachment_url_in_post( $post_id, $orig_attachment_url ) {
			global $wpdb;
			$new_attachment_url = wp_get_attachment_url( $post_id );
			if ( $new_attachment_url ) {
				$wpdb->query( $wpdb->prepare( "UPDATE $wpdb->posts SET post_content = REPLACE(post_content, '%s', '%s');", $orig_attachment_url, $new_attachment_url ) );
			}
		}

		/**
		 * @param $post_id
		 * @param $orig_image_urls
		 * @param $meta
		 * @param $orig_attachment_url
		 */
		public function update_references_in_posts( $post_id, $orig_image_urls, $meta, $orig_attachment_url ) {
			if ( wp_attachment_is_image( $post_id ) ) {
				$this->update_image_url_in_post( $orig_image_urls, "full", $post_id );
				foreach ( $meta['sizes'] as $size => $meta_size ) {
					$this->update_image_url_in_post( $orig_image_urls, $size, $post_id );
				}
			} elseif ( $orig_attachment_url ) {
				$this->update_attachment_url_in_post( $post_id, $orig_attachment_url );
			}
		}

		/**
		 * Checks that the object is in a correct state
		 *
		 * @mvc Model
		 *
		 * @param string $property An individual property to check, or 'all' to check all of them
		 *
		 * @return bool
		 */
		protected function is_valid( $property = 'all' ) {
			return true;
		}
	}

	; // end WordPress_Image_Utils
}
